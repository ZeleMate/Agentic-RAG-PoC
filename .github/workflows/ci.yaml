name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint:
    name: Lint & Quality Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: |
            pyproject.toml

      - name: Install lint tools
        run: |
          pip install --upgrade pip
          pip install black isort flake8 nbqa mypy bandit

      - name: Black (repo)
        run: black --check .

      - name: isort (repo)
        run: isort --check-only .

      - name: Flake8 (repo)
        run: flake8 .

      - name: Black (notebooks via nbqa)
        run: |
          if [ -d notebooks ]; then nbqa black --check notebooks; else echo "no notebooks/ dir"; fi

      - name: isort (notebooks via nbqa)
        run: |
          if [ -d notebooks ]; then nbqa isort --check-only notebooks; else echo "no notebooks/ dir"; fi

      - name: Flake8 (notebooks via nbqa)
        run: |
          if [ -d notebooks ]; then nbqa flake8 notebooks; else echo "no notebooks/ dir"; fi

      - name: Mypy (optional on src/)
        run: |
          if [ -d src ]; then mypy src/; else echo "no src/ dir, skipping mypy"; fi

      - name: Bandit (optional on src/)
        run: |
          if [ -d src ]; then bandit -r src/; else echo "no src/ dir, skipping bandit"; fi

  install-and-smoke:
    name: Install deps and smoke test
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: |
            pyproject.toml

      - name: Install project (pulls deps from pyproject)
        run: pip install -e .

      - name: Smoke test imports
        run: |
          python - <<'PY'
          import langgraph
          import langchain
          import langchain_community
          import sentence_transformers
          import torch
          import faiss
          print("Core imports OK")
          PY

      - name: Validate notebook JSON (no execution)
        run: |
          pip install -q nbformat
          python - <<'PY'
          import os, nbformat
          path = 'notebooks/agentic_rag.ipynb'
          assert os.path.exists(path), f"Notebook not found: {path}"
          with open(path, 'r', encoding='utf-8') as f:
            nb = nbformat.read(f, as_version=4)
          print(f"Notebook loads OK; cells: {len(nb.cells)}")
          PY