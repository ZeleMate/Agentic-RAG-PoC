name: CI/CD Pipeline

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions: read-all

on:
  push:
    branches: ['**']  # All branches
    paths-ignore:
      - 'docs/**'
      - '**/*.md'
  pull_request:
    branches: [ main, develop ]

jobs:
  lint:
    name: Lint & Format Check
    runs-on: ubuntu-latest
    timeout-minutes: 15
    # Skip if [skip ci] in commit message
    if: ${{ github.event_name != 'push' || !contains(github.event.head_commit.message, '[skip ci]') }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'
          cache-dependency-path: |
            pyproject.toml
            poetry.lock
            requirements*.txt
      - name: Install dependencies
        run: pip install .[dev]
      - name: Black (check)
        run: black --check src/ tests/
      - name: isort (check)
        run: isort --check-only src/ tests/
      - name: Flake8
        run: flake8 src/ tests/
      - name: Mypy
        run: mypy src/
      - name: Bandit
        run: bandit -r src/

  test:
    name: Pytest & Coverage
    runs-on: ubuntu-latest
    needs: lint
    timeout-minutes: 30
    # Skip if [skip ci] in commit message
    if: ${{ github.event_name != 'push' || !contains(github.event.head_commit.message, '[skip ci]') }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'
          cache-dependency-path: |
            pyproject.toml
      - name: Install dependencies
        run: pip install .[dev]
      - name: Run tests
        run: |
          pytest --maxfail=1 --disable-warnings --tb=short \
                 --cov=src --cov-report=xml --cov-fail-under=25
      - name: Upload coverage.xml
        uses: actions/upload-artifact@v4
        with:
          name: coverage-xml
          path: coverage.xml

  # Always run summary - collects results from all jobs
  summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [test]
    if: always()
    steps:
      - name: Check CI status
        run: |
          echo "=== CI Summary ==="
          echo "Test job status: ${{ needs.test.result }}"
          
          # Check if merge-check job exists (only for PRs)
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            echo "Merge check job: Expected for PR"
          else
            echo "Merge check job: Skipped (not a PR)"
          fi
          
          # Determine overall status
          if [ "${{ needs.test.result }}" == "success" ]; then
            if [ "${{ github.event_name }}" == "pull_request" ]; then
              echo "All CI checks passed!"
            else
              echo "Core CI checks passed!"
            fi
            exit 0
          else
            echo "Some CI checks failed!"
            echo "Test: ${{ needs.test.result }}"
            exit 1
          fi

  # Final summary that always runs and shows all job results
  final-summary:
    name: Final Summary
    runs-on: ubuntu-latest
    needs: [lint, test, summary]
    if: always()
    steps:
      - name: Display final summary
        run: |
          echo "=== FINAL CI SUMMARY ==="
          echo "Event type: ${{ github.event_name }}"
          echo "Branch: ${{ github.ref }}"
          echo ""
          echo "Job Results:"
          echo "  Lint & Format: ${{ needs.lint.result }}"
          echo "  Tests: ${{ needs.test.result }}"
          echo "  Summary: ${{ needs.summary.result }}"
          echo ""
          
          # Count successful jobs with proper handling of skipped jobs
          success_count=0
          total_count=0
          
          # Core jobs that should always run
          if [ "${{ needs.lint.result }}" == "success" ]; then success_count=$((success_count+1)); fi
          if [ "${{ needs.test.result }}" == "success" ]; then success_count=$((success_count+1)); fi
          if [ "${{ needs.summary.result }}" == "success" ]; then success_count=$((success_count+1)); fi
          total_count=$((total_count+4))
          
          # Optional jobs that can be skipped
          total_count=$((total_count+2))
          
          echo "Success Rate: $success_count/$total_count jobs passed"
          
          # For push events, only core jobs matter
          if [ "${{ github.event_name }}" != "pull_request" ]; then
            if [ "${{ needs.lint.result }}" == "success" ] && \
               [ "${{ needs.test.result }}" == "success" ] && \
               [ "${{ needs.summary.result }}" == "success" ]
              echo "Core CI checks passed!"
              exit 0
            else
              echo " Core CI checks failed!"
              echo "  Lint:    ${{ needs.lint.result }}"
              echo "  Test:    ${{ needs.test.result }}"
              echo "  Summary: ${{ needs.summary.result }}"
              exit 1
            fi
          else
            # For PR events, all jobs should succeed or be skipped
            if [ $success_count -eq $total_count ]; then
              echo "All jobs completed successfully!"
              exit 0
            else
              echo "Some jobs failed"
              exit 1
            fi
          fi